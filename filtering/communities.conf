# BGP Communities
#
# 0:0 - No export
# OWNAS:0:0 - No export
# OWNAS:0:xxx - no export to xxx
#
# OWNAS:1x is for prepend control
# OWNAS:11:xxx - Prepend 1x to xxx
# OWNAS:12:xxx - Prepend 2x to xxx
# OWNAS:13:xxx - Prepend 3x to xxx
# OWNAS:19:xxx - Do not export to xxx
#
# OWNAS: 2x is for nexthop info
# OWNAS:20:1 - Nexthop is physically connected
# OWNAS:20:2 - Nexthop is through a tunnel
# OWNAS:21:0 - Nexthop is a peer
# OWNAS:21:1 - Nexthop is a transit provider
# OWNAS:21:2 - Nexthop is a customer


function handle_prepend_communities(int peer_asn) {
    if (OWNAS, 11, peer_asn) ~ bgp_large_community then { bgp_path.prepend(OWNAS); }
    if (OWNAS, 12, peer_asn) ~ bgp_large_community then { bgp_path.prepend(OWNAS); bgp_path.prepend(OWNAS); }
    if (OWNAS, 13, peer_asn) ~ bgp_large_community then { bgp_path.prepend(OWNAS); bgp_path.prepend(OWNAS); bgp_path.prepend(OWNAS); }
}

function is_export_allowed(int peer_asn) {
    if (0, 0) ~ bgp_community then return false;
    if (OWNAS, 0, 0) ~ bgp_large_community then return false;
    if (OWNAS, 0, peer_asn) ~ bgp_large_community then return false;
    return true;
}

# Tags the next hop for this route as a direct connection
function tag_nexthop_physical() { bgp_large_community.add((OWNAS, 20, 1)); }
# Check if the next hop is a direct connection
function is_nexthop_physical() { return (OWNAS, 20, 1) ~ bgp_large_community; }
# Tags the next hop for this route as a tunneled connection
function tag_nexthop_tunneled() { bgp_large_community.add((OWNAS, 20, 2)); }
# Check if the next hop is a tunneled connection
function is_nexthop_tunneled() { return (OWNAS, 20, 2) ~ bgp_large_community; }
# Tags the next hop for this route as a peer
function tag_nexthop_peer() { bgp_large_community.add((OWNAS, 21, 0)); }
# Check if the next hop is a peer
function is_nexthop_peer() { return (OWNAS, 21, 0) ~ bgp_large_community; }
# Tags the next hop for this route as a transit provider
function tag_nexthop_transit() { bgp_large_community.add((OWNAS, 21, 1)); }
# Check if the next hop is a transit provider
function is_nexthop_transit() { return (OWNAS, 21, 1) ~ bgp_large_community; }
# Tags the next hop for this route as a customer
function tag_nexthop_customer() { bgp_large_community.add((OWNAS, 21, 2)); }
