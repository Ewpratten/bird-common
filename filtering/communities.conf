# BGP Communities
#
# 0:0 - No export
# OWNAS:0:0 - No export
# OWNAS:0:xxx - no export to xxx
#
# OWNAS:1x is for prepend control
# OWNAS:11:xxx - Prepend 1x to xxx
# OWNAS:12:xxx - Prepend 2x to xxx
# OWNAS:13:xxx - Prepend 3x to xxx
#
# OWNAS:2xx is for nexthop info
# OWNAS:201 - Nexthop is physically connected
# OWNAS:202 - Nexthop is through a tunnel
# OWNAS:210 - Nexthop is a peer
# OWNAS:211 - Nexthop is a transit provider
# OWNAS:212 - Nexthop is a customer
#
# NOTE: Local preference rules are as follows:
# Physical > Tunnel
# Customer > Peer > Transit


function handle_prepend_communities(int peer_asn) {
    if (OWNAS, 11, peer_asn) ~ bgp_large_community then { bgp_path.prepend(OWNAS); }
    if (OWNAS, 12, peer_asn) ~ bgp_large_community then { bgp_path.prepend(OWNAS); bgp_path.prepend(OWNAS); }
    if (OWNAS, 13, peer_asn) ~ bgp_large_community then { bgp_path.prepend(OWNAS); bgp_path.prepend(OWNAS); bgp_path.prepend(OWNAS); }
}

function is_export_allowed(int peer_asn) {
    if (0, 0) ~ bgp_community then return false;
    if (OWNAS, 0, 0) ~ bgp_large_community then return false;
    if (OWNAS, 0, peer_asn) ~ bgp_large_community then return false;
    return true;
}

# Tags the next hop for this route as a direct connection
function tag_nexthop_physical() { bgp_community.add((OWNAS, 201)); }
# Check if the next hop is a direct connection
function is_nexthop_physical() { return (OWNAS, 201) ~ bgp_community; }
# Tags the next hop for this route as a tunneled connection
function tag_nexthop_tunneled() { bgp_community.add((OWNAS, 202)); }
# Check if the next hop is a tunneled connection
function is_nexthop_tunneled() { return (OWNAS, 202) ~ bgp_community; }
# Tags the next hop for this route as a peer
function tag_nexthop_peer() { bgp_community.add((OWNAS, 210)); }
# Check if the next hop is a peer
function is_nexthop_peer() { return (OWNAS, 210) ~ bgp_community; }
# Tags the next hop for this route as a transit provider
function tag_nexthop_transit() { bgp_community.add((OWNAS, 211)); }
# Check if the next hop is a transit provider
function is_nexthop_transit() { return (OWNAS, 211) ~ bgp_community; }
# Tags the next hop for this route as a customer
function tag_nexthop_customer() { bgp_community.add((OWNAS, 212)); }
# Check if the next hop is a customer
function is_nexthop_customer() { return (OWNAS, 212) ~ bgp_community; }

# Apply localpref according to the nexthop type
function set_localpref() {
    # Customers
    if is_nexthop_physical() && is_nexthop_customer() then { bgp_local_pref = 200; }
    if is_nexthop_tunneled() && is_nexthop_customer() then { bgp_local_pref = 190; }
    # Peers
    if is_nexthop_physical() && is_nexthop_peer() then { bgp_local_pref = 180; }
    if is_nexthop_tunneled() && is_nexthop_peer() then { bgp_local_pref = 170; }
    # Transit
    if is_nexthop_physical() && is_nexthop_transit() then { bgp_local_pref = 160; }
    if is_nexthop_tunneled() && is_nexthop_transit() then { bgp_local_pref = 150; }
}