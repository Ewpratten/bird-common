roa4 table rpki4;
roa6 table rpki6;

protocol rpki {
  roa4 { table rpki4; };
  roa6 { table rpki6; };

  transport tcp;
  remote "rtr.rpki.cloudflare.com" port 8282;

  retry keep 90;
  refresh keep 900;
  expire keep 172800;
}

# True only if RPKI VALID
function is_rpki_valid_for(int peer_asn) {
    case net.type {
        NET_IP4: return roa_check(rpki4, net, peer_asn) = ROA_VALID;
        NET_IP6: return roa_check(rpki6, net, peer_asn) = ROA_VALID;
        else: return false;
    }
}
function is_rpki_valid() { return is_rpki_valid_for(bgp_path.last_nonaggregated); }

# True only if RPKI INVALID
function is_rpki_invalid_for(int peer_asn) {
    case net.type {
        NET_IP4: return roa_check(rpki4, net, peer_asn) = ROA_INVALID;
        NET_IP6: return roa_check(rpki6, net, peer_asn) = ROA_INVALID;
        else: return false;
    }
}
function is_rpki_invalid() { return is_rpki_invalid_for(bgp_path.last_nonaggregated); }

# True only if RPKI UNKNOWN
function is_rpki_unknown_for(int peer_asn) {
    case net.type {
        NET_IP4: return roa_check(rpki4, net, peer_asn) = ROA_UNKNOWN;
        NET_IP6: return roa_check(rpki6, net, peer_asn) = ROA_UNKNOWN;
        else: return false;
    }
}
function is_rpki_unknown() { return is_rpki_unknown_for(bgp_path.last_nonaggregated); }

# True as long as not invalid
function is_rpki_acceptable() {
    return is_rpki_valid() || is_rpki_unknown();
}